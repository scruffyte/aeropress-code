/** GROUP B AEROPRESS TEMPLATE (UPDATE ACCORDINGLY) *****************************

BY TASMIN WHITTLE, BII TARTAGLIA, IZABELLA MICO & MAX JACOBY - 2023-24

DIS CODE MAKE COFFEE

** C O N F I G U R A T I O N   B I T S ******************************/

#pragma config FOSC = INTIO67, FCMEN = OFF, IESO = OFF                      // CONFIG1H
#pragma config PWRT = OFF, BOREN = OFF, BORV = 30                           // CONFIG2L
#pragma config WDTEN = OFF, WDTPS = 32768                                   // CONFIG2H
#pragma config MCLRE = ON, LPT1OSC = OFF, PBADEN = ON, CCP2MX = PORTC       // CONFIG3H
#pragma config STVREN = ON, LVP = OFF, XINST = OFF                          // CONFIG4L
#pragma config CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF                   // CONFIG5L
#pragma config CPB = OFF, CPD = OFF                                         // CONFIG5H
#pragma config WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF               // CONFIG6L
#pragma config WRTB = OFF, WRTC = OFF, WRTD = OFF                           // CONFIG6H
#pragma config EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF           // CONFIG7L
#pragma config EBTRB = OFF                                                  // CONFIG7H

/** I N C L U D E S **************************************************/

#include "p18f45k20.h"
#include "ADC.h"
#include <delays.h>

/** D E F I N E S ****************************************************/

#define CLEAR_SCREEN  	0b00000001
#define FOUR_BIT  		0b00101100
#define LINES_5X7  		0b00111000
#define CURSOR_BLINK  	0b00001111
#define CURSOR_RIGHT  	0b00000110

#define DATA_PORT  LATD
#define RS_PIN     PORTDbits.RD6
#define E_PIN      PORTDbits.RD7

/** V A R I A B L E S ***********************************************/

#pragma udata                       // declare statically allocated uinitialized variables

/** I N T E R R U P T S *********************************************/

//--- high priority interrupt vector ---//

#pragma code InterruptVectorHigh = 0x08
void InterruptVectorHigh (void)
{
  _asm
    goto InterruptServiceHigh               //jump to interrupt routine
  _endasm
}

//--- Low priority interrupt vector ---//

#pragma code InterruptVectorLow = 0x18
void InterruptVectorLow (void)
{
  _asm
    goto InterruptServiceLow                //jump to interrupt routine
  _endasm
}

/** F U N C T I O N S ***********************************************/

//--- LCD ---//

void Delay5milli(void)					    //Suitable delay for LCD
{
    Delay1KTCYx(2);           						
}

void SetAddr(unsigned char DDaddr)
{
    DATA_PORT &= 0xf0;                      // Write upper nibble
    DATA_PORT |= (((DDaddr | 0b10000000)>>4) & 0x0f);

    RS_PIN = 0;                             // Set control bit
    Delay5milli();
    E_PIN = 1;                              // Clock the cmd and address in
    Delay5milli();
    E_PIN = 0;

    DATA_PORT &= 0xf0;                      // Write lower nibble
    DATA_PORT |= (DDaddr&0x0f);

    Delay5milli();
    E_PIN = 1;                              // Clock the cmd and address in
    Delay5milli();
    E_PIN = 0;
}

void WriteCmd(unsigned char cmd)
{
    DATA_PORT &= 0xf0;
    DATA_PORT |= (cmd>>4)&0x0f;           
    RS_PIN = 0;                     		// Set control signals for command
    Delay5milli();
    E_PIN = 1;                      		// Clock command in
    Delay5milli();
    E_PIN = 0;

    DATA_PORT &= 0xf0;              		// Lower nibble interface
    DATA_PORT |= cmd&0x0f;
    Delay5milli();
    E_PIN = 1;                      		// Clock command in
    Delay5milli();
    E_PIN = 0;
}

void WriteChar(char data)
{
    DATA_PORT &= 0xf0;
    DATA_PORT |= ((data>>4)&0x0f);

    RS_PIN = 1;                     		// Set control bits
    Delay5milli();
    E_PIN = 1;                      		// Clock nibble into LCD
    Delay5milli();
    E_PIN = 0;

    DATA_PORT &= 0xf0;              		// Lower nibble interface
    DATA_PORT |= (data&0x0f);

    Delay5milli();
    E_PIN = 1;                      		// Clock nibble into LCD
    Delay5milli();
    E_PIN = 0;
}

void WriteString(const rom char *buffer)    
{		 
    while(*buffer)                  		// Write data to LCD up to null
    {
        Delay5milli();
        WriteChar( *buffer);          		// Write character to LCD
        buffer++;                     		// Increment buffer
    }
    return;
}     

//--- ADC ---//

void ADC_Init(void)
{ 	
    ANSELbits.ANS0 = 1;	    // set RA0 to analog
    ADCON1 = 0;             // Sets bits VCFG1 and VCFG0 in ADCON1 so the ADC voltage reference is VSS to VDD
    ADCON2 = 0b10111000;    // right justify and set aquisition time
    ADCON0 = 0b00000001;    // Select channel 0 (AN0) to read the AN0 voltage and turn on ADC
}

void ADC_Convert(void)
{
    ADCON0bits.GO_DONE = 1;             // start conversion
    while (ADCON0bits.GO_DONE == 1);    // wait for it to complete
    ADCvalue = ADRESL + (ADRESH * 256); // store 10bit result
}

void init_io(void)
{
    ANSEL  = 0;	                        	    // set i/o to digital
    ANSELH = 0;                                 // set rest of i/o to digital
    TRISD  = 0;                 		        // sets port D to output
    LATD   = 0b00000000;                       	// turns off port D outputs so display is blank
    TRISA = 0; 					            	//sets PORTA as all outputs for RGB LEDs
    LATA = 0b11111111; 			        		//turns off PORTA outputs 
    TRISAbits.TRISA0 = 1;		                // RA0 = input for pot ADC
    TRISBbits.TRISB0 = 1;		                // RB0 = input for pulse sensor
    TRISBbits.TRISB1 = 1;                       // RB1 = input for baseline button
    TRISBbits.TRISB2 = 1;                       // RB2 = input for reading button
    TRISCbits.TRISC3 = 0;                       // RC3 clock pulse verification
    TRISCbits.TRISC2 = 0;                       // RC2 pulse detection verification
    LATCbits.LATC3 = 0;                         // turn off RC3 initially
    LATCbits.LATC2 = 0;                         // initial set to off
}

void init_interrupts(void)
{
    RCONbits.IPEN = 1;                          // Enable priority levels on interrupts
    INTCONbits.GIEH = 1;                        // high priority interrupt enable
    INTCONbits.GIEL = 1;                        // Low priority interrupt enable
    INTCON2bits.INTEDG0 = 0;                    // interrupt on falling edge of INT0 (pulled high) (pulse sensor)
    INTCON2bits.INTEDG1 = 0;                    // interrupt on rising edge of INT1 (pulled low) (baseline button)
    INTCON2bits.INTEDG2 = 0;                    // interrupt on rising edge of INT2 (pulled low) (reading button)
    INTCONbits.INT0IF = 0;                      // clears INT0 flag so it doesn't trigger immediately
    INTCON3bits.INT1IF = 0;                     // clears INT1 flag
    INTCON3bits.INT2IF = 0;                     // clears INT2 flag
    INTCON3bits.INT1IP = 0;                     // INT1 low prioroty
    INTCON3bits.INT2IP = 0;                     // INT2 low prioroty
                                                // NOTE: INT0 is ALWAYS a high priority interrupt so no need to set
    INTCONbits.INT0IE = 1;                      // enable INT0 external interrupt
    INTCON3bits.INT1IE = 1;                     // enable INT1 external interrupt
    INTCON3bits.INT2IE = 1;                     // enable INT2 external interrupt
                                                // NOTE2: additional interrupts are initilized in timer function
}

void init_lcd(void)
{
    WriteCmd ( 0x02 );							// sets 4bit operation
    WriteCmd ( CLEAR_SCREEN );                  // clears the screen
    WriteCmd ( FOUR_BIT & LINES_5X7 );			// sets 5x7 and multiline operation.
    programFlame();                             // write the custom flame characters to the LCD
    WriteCmd ( CURSOR_BLINK );					// blinks cursor
    WriteCmd ( CURSOR_RIGHT  );					// moves cursor right	
    WriteString("Hello!");                      // test the lcd and show the program is running
    Delay1KTCYx(200);                           // wait a second
    WriteCmd ( CLEAR_SCREEN );                  // clears the screen
}

void reset_button_interrupts(void)
{
    INTCON3bits.INT1IF = 0;                     // clears INT1 flag
    INTCON3bits.INT2IF = 0;                     // clears INT2 flag
    INTCON3bits.INT1IE = 1;                     // enable INT1 external interrupt
    INTCON3bits.INT2IE = 1;                     // enable INT2 external interrupt
}

/** M A I N ********************************************************/

#pragma code    // declare executable instructions

void main(void)
{
    init_io();                                  // init io 
    init_lcd();                                 // init lcd
    Timer1_Init();                              // Run timer init function and starts the timer
    ADC_Init();                                 // init ADC
    start:
    init_interrupts();                          // init interrupts 
    WriteCmd( CLEAR_SCREEN );
    goto start;
} // main

/** INTERRUPT SERVICE ROUTINES **************************************/

#pragma interrupt InterruptServiceHigh           // "interrupt" pragma also for high priority
void InterruptServiceHigh(void)
{
    // Check for INT0 interrupt
    if (INTCONbits.INT0IF)
    {
        INTCONbits.INT0IF = 0;                   // clear (reset) flag

    }

    // check for TM1IF interrupt
    if  (PIR1bits.TMR1IF)
    {
        PIR1bits.TMR1IF = 0;                     // clear (reset) flaG

    }
}

void InterruptServiceLow(void)
{
    if(INTCON3bits.INT1IF)
    {

    }
    
}
